package officet.officet_service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import officet.officet_dao.A01_WorkerDao;
import officet.officet_vo.Approval_sch;
import officet.officet_vo.Attendance;
import officet.officet_vo.Team;
import officet.officet_vo.Worker;

@Service
public class A01_WorkerService {
	@Autowired
	private A01_WorkerDao dao;

	public List<Worker> getAllWorker() {
		System.out.println("getAllWorker 불러오기");
		return dao.getAllWorker();
	}

	public Worker loginCheck(int worker_id, String pass) {
		boolean result = true;
		Worker w = dao.loginCheck(worker_id, pass);
		System.out.println("결과값>>>>>>" + result);
		return w;
	}

	// 출퇴근 상태 확인
	public Map<String, Boolean> checkAtt(int worker_id) {
		Map<String, Boolean> attInfo = new HashMap<>();
		Attendance att = dao.getAttInfo(worker_id);
		if (att == null) {
			attInfo.put("check_in", false);
			attInfo.put("check_out", false);
		} else {
			attInfo.put("check_in", true);
			if (att.getCheck_out_time() == null) {
				attInfo.put("check_out", false);
			} else {
				attInfo.put("check_out", true);
			}
		}
		return attInfo;
	}

	// 출근
	public void check_in(int worker_id) {
		String check_in_status = "";
		LocalTime now = LocalTime.now();
		LocalTime beforeNine = LocalTime.of(8, 50);
		LocalTime afterNine = LocalTime.of(9, 10);
		if (now.isBefore(afterNine) && now.isAfter(beforeNine)) {
			check_in_status = "정상출근";
		} else {
			check_in_status = "지각";
		}
		dao.check_in(worker_id, check_in_status);
	}

	// 퇴근
	public void check_out(int worker_id) {
		String check_out_status = "";
		LocalTime now = LocalTime.now();
		LocalTime beforeSix = LocalTime.of(17, 50);
		if (now.isAfter(beforeSix)) {
			check_out_status = "정상퇴근";
		} else {
			check_out_status = "조퇴";
		}
		dao.check_out(worker_id, check_out_status);
	}

	// 출퇴근 시간정보 가져오기
	public Attendance getAttInfo(int worker_id) {
		Attendance attInfo = dao.getAttInfo(worker_id);
		return attInfo;
	}

	// 최근 출결 기록 가져오기
	public List<Attendance> getRecentAttList(int worker_id) {
		List<Attendance> attList = dao.getRecentAttList(worker_id);
		for (Attendance att : attList) {
			System.out.print("서비스단 >>>>> ");
			System.out.println(att.getCheck_in_time());
		}
		return attList;
	}

	// 최근 출결 기록 카운트 하기
	public Map<String, Integer> getRecentAttSum(int worker_id) {
		Map<String, Integer> attInfo = new HashMap<>();
		List<Attendance> attList = dao.getRecentAttList(worker_id);
		int att01 = 0;
		int att02 = 0;
		int att03 = 0;
		int att04 = 0;
		int att05 = 0;
		int att06 = 0;

		for (Attendance att : attList) {
			if (att.getCheck_in_status() != null && att.getCheck_out_status() != null) {
				if (att.getCheck_in_status().equals("정상출근") && att.getCheck_out_status().equals("정상퇴근")) {
					att01++;
				} else if (att.getCheck_in_status().equals("결근")) {
					att02++;
				} else if (att.getCheck_in_status().equals("지각")) {
					att03++;
				} else if (att.getCheck_in_status().equals("휴가")) {
					att04++;
				} else if (att.getCheck_in_status().equals("병가")) {
					att05++;
				} else if (att.getCheck_out_status().equals("조퇴")) {
					att06++;
				}
			}

		}

		attInfo.put("att01", att01);
		attInfo.put("att02", att02);
		attInfo.put("att03", att03);
		attInfo.put("att04", att04);
		attInfo.put("att05", att05);
		attInfo.put("att06", att06);

		return attInfo;
	}
	
	// 사원번호 찾기
    public String findId(Worker worker) {
       if(worker.getName()==null) worker.setName("");;
       if(worker.getP_number()==null) worker.setP_number("");
       String worker_id = dao.findId(worker);
       if(worker_id == null) worker_id = "";
       System.out.println(worker_id);
       return worker_id;
    }
	//비밀번호 재설정 전 사원 유무 확인
	    public String checkWorker(Worker worker) {
	       return dao.checkWorker(worker)>0?"Y":"N";
	    }
	//비밀번호 재설정
	    public String uptPass(Worker worker) {
	       return dao.uptPass(worker)>0?"success":"fail";
	    }



/////////////////////////////////////////////////////////////////////////

	// 유저정보
	public Worker getUserInfo(int worker_id) {
		Worker w = dao.getUserInfo(worker_id);
		return w;
	}

	// 나의 정보 업데이트
    public String uptProfile(Worker worker) {
       return dao.uptProfile(worker)>0?"Y":"N";
    }


	// 나의 정보 불러오기
	public Worker getProfile(int worker_id) {
		System.out.println("프로필 정보 불러오기.");
		return dao.getProfile(worker_id);
	}

	// 입사일
	public String getHireDate(int worker_id) {
		System.out.println(dao.getHireDate(worker_id));
		return dao.getHireDate(worker_id);
	}
///////////////////////////////////////////////////////////////

	public List<Worker> getWorkerList(Worker sch) {
		if (sch.getTeam_name() == null)
			sch.setTeam_name("");
		if (sch.getName() == null)
			sch.setName("");
		System.out.println("service" + sch.getTeam_name());
		return dao.getWorkerList(sch);
	}

	public String insertWorker(Worker ins) {
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String hire_dateS = ins.getHire_dateS();
		Date hire_date;
		try {
			hire_date = formatter.parse(hire_dateS);
			ins.setHire_date(hire_date);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return dao.insertWorker(ins) > 0 ? "등록성공" : "등록되지 않음";

	}

	public String checkId(int worker_id) {
		return dao.checkId(worker_id) > 0 ? "등록불가" : "등록가능";
	}

	public Worker getWorker(int worker_id) {
		return dao.getWorker(worker_id);
	}

	public String updateWorker(Worker upt) {
		return dao.updateWorker(upt) > 0 ? "수정성공" : "수정되지않음";
	}

	public String deleteWorker(int worker_id) {
		return dao.deleteWorker(worker_id) > 0 ? "삭제성공" : "삭제되지않음";
	}

	//
	public List<Team> getAllTeams() {
		return dao.getAllTeams();
	}

	public List<Worker> getWorkersByTeam(String team_name) {
		return dao.getWorkersByTeam(team_name);
	}

	/////////////// 결재관리//////////////
	//결재관리(조회)
    public List<Approval_sch> getAppList(Approval_sch sch){
        if(sch.getStatus_name()==null) sch.setStatus_name("");
        if(sch.getApprover_team()==null) sch.setApprover_team("");
        if(sch.getApprover()==null) sch.setApprover("");
        if(sch.getRequester_team()==null) sch.setRequester_team("");
        if(sch.getRequester()==null) sch.setRequester("");
        return dao.getAppList(sch);
     }
    //결재관리(상세)
    public Approval_sch getAppDetail(String approval_id){
        return dao.getAppDetail(approval_id);
     }
    //결재관리(수정)
    public String updateApproval(Approval_sch upt){
        return dao.updateApproval(upt)>0?"수정성공":"수정되지않음";
     }
    //결재관리(삭제)
    public String deleteApproval(int approval_id){
        return dao.deleteApproval(approval_id)>0?"삭제성공":"삭제되지않음";
     }  

}
